@startuml Zipperoo電商平台應用服務類圖

'======== Application Services =====
package "應用服務層 (Application Services)" {
    
    class HealthService <<service>> {
        +checkHealth(): HealthStatus
        --
        +getSystemInfo(): SystemInfo
        +getTimestamp(): DateTime
    }
    
    class AuthService <<service>> {
        +register(dto: RegisterDto): AuthResponseDto
        +login(dto: LoginDto): AuthResponseDto
        +logout(userId: number): void
        +getProfile(userId: number): User
        +forgotPassword(dto: ForgotPasswordDto): MessageDto
        +resetPassword(dto: ResetPasswordDto): MessageDto
        --
        -generateTokens(userId: number): TokenPair
        -hashPassword(password: string): string
        -comparePassword(password: string, hash: string): boolean
        -validateRole(role: Role): boolean
        -sendPasswordResetEmail(email: string, token: string): void
    }
    
    class ProductService <<service>> {
        +getProducts(query: ProductQueryDto): PaginatedResult<Product>
        +getProduct(id: number): ProductWithDetails
        +createProduct(sellerId: number, dto: CreateProductDto): Product
        +updateProduct(id: number, sellerId: number, dto: UpdateProductDto): Product
        +deleteProduct(id: number, userId: number, role: Role): void
        +getSellerProducts(sellerId: number, query: ProductQueryDto): PaginatedResult<Product>
        +getAdminProducts(query: PaginationDto): PaginatedResult<Product>
        --
        -validateProductOwnership(productId: number, sellerId: number): boolean
        -calculateAverageRating(productId: number): number
        -validateProductStatus(status: ProductStatus): boolean
    }
    
    class CategoryService <<service>> {
        +createCategory(dto: CreateCategoryDto): Category
        +getCategories(): CategoryWithProductCount[]
        +getCategory(id: number): Category
        +updateCategory(id: number, dto: UpdateCategoryDto): Category
        +deleteCategory(id: number): void
    }
    
    class VariantService <<service>> {
        +addVariants(productId: number, sellerId: number, dto: CreateVariantsDto): ProductVariant[]
        +updateVariant(variantId: number, sellerId: number, dto: UpdateVariantDto): ProductVariant
        +deleteVariant(variantId: number, sellerId: number): void
        --
        -validateVariantOwnership(variantId: number, sellerId: number): boolean
        -checkVariantStock(variantId: number, quantity: number): boolean
        -updateProductStock(productId: number): void
    }
    
    class CartService <<service>> {
        +getCart(buyerId: number): CartWithItems
        +addItem(buyerId: number, dto: AddCartItemDto): Cart
        +updateItem(itemId: number, buyerId: number, dto: UpdateCartItemDto): Cart
        +removeItem(itemId: number, buyerId: number): Cart
        --
        -validateCartOwnership(itemId: number, buyerId: number): boolean
        -validateVariantAvailability(variantId: number, quantity: number): boolean
        -calculateCartTotal(cartId: number): number
        -checkItemExists(itemId: number): boolean
    }
    
    class OrderService <<service>> {
        +checkout(buyerId: number, dto: CheckoutDto): Order[]
        +getBuyerOrders(buyerId: number, query: PaginationDto): PaginatedResult<Order>
        +getSellerOrders(sellerId: number, query: PaginationDto): PaginatedResult<Order>
        +getOrder(orderId: number, userId: number, role: Role): OrderWithDetails
        +cancelOrder(orderId: number, buyerId: number): Order
        +shipOrder(orderId: number, sellerId: number): Order
        +completeOrder(orderId: number, sellerId: number): Order
        +updateOrderStatus(orderId: number, status: OrderStatus, adminId: number): Order
        +getAllOrders(query: PaginationDto): PaginatedResult<Order>
        --
        -validateOrderOwnership(orderId: number, userId: number, role: Role): boolean
        -processPayment(totalAmount: number): PaymentResult
        -createOrderFromCartItems(buyerId: number, cartItems: CartItem[]): Order[]
        -updateProductStock(orderItems: OrderItem[]): void
        -validateOrderStatus(currentStatus: OrderStatus, newStatus: OrderStatus): boolean
        -canCancel(order: Order): boolean
        -canShip(order: Order): boolean
        -canComplete(order: Order): boolean
    }
    
    class ReviewService <<service>> {
        +createReview(buyerId: number, productId: number, dto: CreateReviewDto): Review
        +getProductReviews(productId: number, query: PaginationDto): PaginatedResult<Review>
        +updateReview(reviewId: number, userId: number, dto: UpdateReviewDto): Review
        +deleteReview(reviewId: number, userId: number, role: Role): void
        --
        -validateReviewOwnership(reviewId: number, buyerId: number): boolean
        -checkDuplicateReview(buyerId: number, productId: number): boolean
        -validateReviewScore(score: number): boolean
        -updateProductRating(productId: number): void
    }
    
    class ChatService <<service>> {
        +createOrGetRoom(dto: CreateChatRoomDto): ChatRoom
        +getUserRooms(userId: number): ChatRoom[]
        +getMessages(roomId: number, userId: number, query: PaginationDto): PaginatedResult<ChatMessage>
        +sendMessage(roomId: number, userId: number, dto: SendMessageDto): ChatMessage
        --
        -validateRoomAccess(roomId: number, userId: number): boolean
        -findExistingRoom(buyerId: number, sellerId: number): ChatRoom
        -createNewRoom(buyerId: number, sellerId: number): ChatRoom
        -validateMessageContent(content: string): boolean
    }
    
    class ImageService <<service>> {
        +uploadImages(productId: number, sellerId: number, files: File[]): ProductImage[]
        +deleteImage(imageId: number, userId: number, role: Role): void
        +getImageByName(imgName: string): ProductImage
        +getImageById(imageId: number): ProductImage
        --
        -validateImageOwnership(imageId: number, userId: number, role: Role): boolean
        -validateFileType(file: File): boolean
        -validateFileSize(file: File): boolean
        -saveImageFile(file: File): string
        -generateImageUrl(filename: string): string
        -deleteImageFile(filename: string): void
    }
    
    class AdminService <<service>> {
        +getUsers(query: PaginationDto): PaginatedResult<User>
        +deleteUser(userId: number, adminId: number): void
        +blockUser(userId: number, adminId: number): User
        +unblockUser(userId: number, adminId: number): User
        +getLogs(query: PaginationDto): PaginatedResult<LogEntry>
        --
        -validateAdminPermission(adminId: number): boolean
        -validateUserExists(userId: number): boolean
        -logAdminAction(adminId: number, action: string, targetId: number): void
        -canDeleteUser(userId: number): boolean
        -canBlockUser(userId: number): boolean
    }
}

'======== 服務依賴關係 (Service Dependencies) =====
package "外部依賴 (External Dependencies)" {
    class PrismaService <<repository>> {
        +user: UserRepository
        +product: ProductRepository
        +category: CategoryRepository
        +order: OrderRepository
        +cart: CartRepository
        +review: ReviewRepository
        +chat: ChatRepository
        +image: ImageRepository
    }
    
    class JwtService <<utility>> {
        +sign(payload: object): string
        +verify(token: string): object
        +decode(token: string): object
    }
    
    class BcryptService <<utility>> {
        +hash(password: string, rounds: number): string
        +compare(password: string, hash: string): boolean
    }
    
    class FileService <<utility>> {
        +saveFile(file: File, path: string): string
        +deleteFile(path: string): void
        +validateFile(file: File): boolean
    }
    
    class MailService <<utility>> {
        +sendPasswordResetEmail(email: string, token: string): void
        +sendOrderConfirmation(email: string, order: Order): void
    }
    
    class LoggerService <<utility>> {
        +log(level: string, message: string, meta?: object): void
        +error(message: string, error: Error): void
        +warn(message: string, meta?: object): void
        +info(message: string, meta?: object): void
    }
}

'======== 服務間關係 (Service Relationships) =====
AuthService --> PrismaService
AuthService --> JwtService
AuthService --> BcryptService
AuthService --> MailService
AuthService --> LoggerService

ProductService --> PrismaService
ProductService --> ImageService
ProductService --> LoggerService

CategoryService --> PrismaService
CategoryService --> LoggerService

VariantService --> PrismaService
VariantService --> ProductService
VariantService --> LoggerService

CartService --> PrismaService
CartService --> VariantService
CartService --> LoggerService

OrderService --> PrismaService
OrderService --> CartService
OrderService --> VariantService
OrderService --> MailService
OrderService --> LoggerService

ReviewService --> PrismaService
ReviewService --> ProductService
ReviewService --> OrderService
ReviewService --> LoggerService

ChatService --> PrismaService
ChatService --> LoggerService

ImageService --> PrismaService
ImageService --> FileService
ImageService --> LoggerService

AdminService --> PrismaService
AdminService --> LoggerService

@enduml
