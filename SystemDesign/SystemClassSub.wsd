@startuml Zipperoo電商平台系統類圖

'======== Enumerations ======
enum Role {
    BUYER
    SELLER
    ADMIN
}

enum ProductStatus {
    ON_SHELF
    OFF_SHELF
    DELETED
}

enum OrderStatus {
    UNCOMPLETED
    COMPLETED  
    CANCELED
}

'======== Core Controllers =====
package "Controllers" {
    class HealthController {
        +getHealth(): ResponseDto
    }
    
    class AuthController {
        +register(dto: RegisterDto): ResponseDto
        +login(dto: LoginDto): ResponseDto
        +logout(): ResponseDto
        +getProfile(): ResponseDto
        +forgotPassword(dto: ForgotPasswordDto): ResponseDto
        +resetPassword(dto: ResetPasswordDto): ResponseDto
    }
    
    class ProductController {
        +getProducts(query: ProductQueryDto): ResponseDto
        +getProduct(id: number): ResponseDto
        +getCategories(): ResponseDto
        +getCategoryProducts(id: number, query: PaginationDto): ResponseDto
    }
    
    class CategoryController {
        +createCategory(dto: CreateCategoryDto): ResponseDto
        +getCategories(): ResponseDto
        +getCategory(id: number): ResponseDto  
        +updateCategory(id: number, dto: UpdateCategoryDto): ResponseDto
        +deleteCategory(id: number): ResponseDto
    }
    
    class SellerProductController {
        +getProducts(query: ProductQueryDto): ResponseDto
        +createProduct(dto: CreateProductDto): ResponseDto
        +getProduct(id: number): ResponseDto
        +updateProduct(id: number, dto: UpdateProductDto): ResponseDto
        +deleteProduct(id: number): ResponseDto
        +getOrders(query: PaginationDto): ResponseDto
        +shipOrder(orderId: number): ResponseDto
        +completeOrder(orderId: number): ResponseDto
    }
    
    class VariantController {
        +addVariants(productId: number, dto: CreateVariantsDto): ResponseDto
        +updateVariant(variantId: number, dto: UpdateVariantDto): ResponseDto
        +deleteVariant(variantId: number): ResponseDto
    }
    
    class CartController {
        +getCart(): ResponseDto
        +addItem(dto: AddCartItemDto): ResponseDto
        +updateItem(itemId: number, dto: UpdateCartItemDto): ResponseDto
        +removeItem(itemId: number): ResponseDto
    }
    
    class OrderController {
        +checkout(dto: CheckoutDto): ResponseDto
        +getOrders(query: PaginationDto): ResponseDto
        +getOrder(orderId: number): ResponseDto
        +cancelOrder(orderId: number): ResponseDto
    }
    
    class ReviewController {
        +createReview(productId: number, dto: CreateReviewDto): ResponseDto
        +getReviews(productId: number, query: PaginationDto): ResponseDto
        +updateReview(reviewId: number, dto: UpdateReviewDto): ResponseDto
        +deleteReview(reviewId: number): ResponseDto
    }
    
    class ChatController {
        +createRoom(dto: CreateChatRoomDto): ResponseDto
        +getRooms(): ResponseDto
        +getMessages(roomId: number, query: PaginationDto): ResponseDto
        +sendMessage(roomId: number, dto: SendMessageDto): ResponseDto
    }
    
    class ImageController {
        +uploadImages(productId: number, files: File[]): ResponseDto
        +deleteImage(imageId: number): ResponseDto
        +getImageByName(imgName: string): ResponseDto
        +getImageById(imageId: number): ResponseDto
    }
    
    class AdminController {
        +getUsers(query: PaginationDto): ResponseDto
        +deleteUser(userId: number): ResponseDto
        +blockUser(userId: number): ResponseDto
        +unblockUser(userId: number): ResponseDto
        +getProducts(query: PaginationDto): ResponseDto
        +deleteProduct(productId: number): ResponseDto
        +getOrders(query: PaginationDto): ResponseDto
        +getOrder(id: number): ResponseDto
        +updateOrderStatus(id: number, dto: UpdateOrderStatusDto): ResponseDto
        +getLogs(query: PaginationDto): ResponseDto
    }
}

'======== Application Services =====
package "Services" {
    class AuthService {
        +register(dto: RegisterDto): AuthResponse
        +login(dto: LoginDto): AuthResponse
        +validateUser(token: string): User
        +forgotPassword(email: string): void
        +resetPassword(token: string, password: string): void
    }
    
    class CartService {
        +getCart(userId: number): Cart
        +addItem(dto: AddCartItemDto): Cart
        +updateItem(itemId: number, dto: UpdateCartItemDto): Cart
        +removeItem(itemId: number): Cart
    }
    
    class OrderService {
        +checkout(buyerId: number, dto: CheckoutDto): Order
        +getOrders(userId: number, role: Role): Order[]
        +getOrder(orderId: number, userId: number): Order
        +cancelOrder(orderId: number, buyerId: number): Order
        +shipOrder(orderId: number, sellerId: number): Order
        +completeOrder(orderId: number, sellerId: number): Order
    }
    
    class ProductService {
        +getProducts(query: ProductQueryDto): PaginatedResult<Product>
        +getProduct(id: number): Product
        +createProduct(sellerId: number, dto: CreateProductDto): Product
        +updateProduct(id: number, sellerId: number, dto: UpdateProductDto): Product
        +deleteProduct(id: number, userId: number, role: Role): void
    }
    
    class VariantService {
        +addVariants(productId: number, sellerId: number, dto: CreateVariantsDto): ProductVariant[]
        +updateVariant(variantId: number, sellerId: number, dto: UpdateVariantDto): ProductVariant
        +deleteVariant(variantId: number, sellerId: number): void
    }
    
    class ReviewService {
        +createReview(buyerId: number, productId: number, dto: CreateReviewDto): Review
        +getReviews(productId: number, query: PaginationDto): PaginatedResult<Review>
        +updateReview(reviewId: number, userId: number, dto: UpdateReviewDto): Review
        +deleteReview(reviewId: number, userId: number): void
    }
    
    class ChatService {
        +createOrGetRoom(dto: CreateChatRoomDto): ChatRoom
        +getRooms(userId: number): ChatRoom[]
        +getMessages(roomId: number, userId: number, query: PaginationDto): PaginatedResult<ChatMessage>
        +sendMessage(roomId: number, userId: number, dto: SendMessageDto): ChatMessage
    }
    
    class CategoryService {
        +getCategories(): Category[]
        +getCategory(id: number): Category
        +createCategory(dto: CreateCategoryDto): Category
        +updateCategory(id: number, dto: UpdateCategoryDto): Category
        +deleteCategory(id: number): void
    }
    
    class ImageService {
        +uploadImages(productId: number, sellerId: number, files: File[]): ProductImage[]
        +deleteImage(imageId: number, userId: number): void
        +getImageByName(imgName: string): ProductImage
        +getImageById(imageId: number): ProductImage
    }
    
    class AdminService {
        +getUsers(query: PaginationDto): PaginatedResult<User>
        +deleteUser(userId: number): void
        +blockUser(userId: number): User
        +unblockUser(userId: number): User
        +getLogs(query: PaginationDto): PaginatedResult<LogEntry>
    }
    
    class HealthService {
        +checkHealth(): HealthStatus
    }
}

'======== Core Models ============
class User {
    +id: Int
    +account: String
    -passwordHash: String
    +username: String
    +email: String
    +phone: String?
    +role: Role
    +isBlocked: Boolean
    +shopName: String?
    +description: String?
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +isSeller(): boolean
    +isBuyer(): boolean
    +isAdmin(): boolean
}

class Category {
    +id: Int
    +name: String
    +createdAt: DateTime
    +updatedAt: DateTime
}

class Product {
    +id: Int
    +sellerId: Int
    +categoryId: Int?
    +name: String
    +description: String?
    +status: ProductStatus
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +changeStatus(newStatus: ProductStatus)
    +isOwnedBy(sellerId: Int): boolean
}

class ProductVariant {
    +id: Int
    +productId: Int
    +price: Int
    +stock: Int
    +name: String
    +attributes: Json
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +updateStock(delta: Int)
    +isAvailable(): boolean
    +hasEnoughStock(quantity: Int): boolean
}

class ProductImage {
    +id: Int
    +productId: Int
    +filename: String
    +url: String
    +createdAt: DateTime
    +updatedAt: DateTime
}

class Cart {
    +id: Int
    +buyerId: Int
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +calculateTotal(): Int
    +getSelectedItems(): CartItem[]
    +clear()
}

class CartItem {
    +id: Int
    +cartId: Int
    +productVariantId: Int
    +quantity: Int
    +unitPrice: Int
    +isSelected: Boolean
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +getTotal(): Int
    +updateQuantity(newQty: Int)
    +select()
    +unselect()
}

class Order {
    +id: Int
    +buyerId: Int
    +sellerId: Int
    +totalAmount: Int
    +status: OrderStatus
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +canCancel(): boolean
    +canShip(): boolean
    +canComplete(): boolean
    +cancel()
    +ship()
    +complete()
}

class OrderItem {
    +id: Int
    +orderId: Int
    +productVariantId: Int
    +quantity: Int
    +unitPrice: Int
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +getTotal(): Int
}

class Review {
    +id: Int
    +productId: Int
    +buyerId: Int
    +score: Int
    +comment: String?
    +isEdited: Boolean
    +isDeleted: Boolean
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +edit(newScore: Int, newComment: String)
    +delete()
    +isOwnedBy(buyerId: Int): boolean
}

class ChatRoom {
    +id: Int
    +buyerId: Int
    +sellerId: Int
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +canAccess(userId: Int): boolean
}

class ChatMessage {
    +id: Int
    +roomId: Int
    +fromUserId: Int
    +content: String
    +isEdited: Boolean
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +edit(newContent: String)
}

class LogEntry {
    +id: Int
    +level: String
    +message: String
    +meta: Json
    +timestamp: DateTime
}

'======== DTOs =====
package "DTOs" {
    class RegisterDto {
        +account: String
        +password: String
        +username: String
        +email?: String
        +phone?: String
        +role: Role
        +shopName?: String
        +description?: String
    }
    
    class CheckoutDto {
        +cartItemIds?: number[]
    }
    
    class ProductQueryDto {
        +page?: number
        +pageSize?: number
        +search?: string
        +categoryId?: number
        +minPrice?: number
        +maxPrice?: number
        +sortBy?: string
        +sortOrder?: string
    }
    
    class CreateReviewDto {
        +score: number
        +comment?: string
    }
    
    class ResponseDto<T> {
        +statusCode: number
        +message: string
        +data: T
    }
}

'======== Relationships ============
User ||--o{ Product : "sells"
User ||--o{ Order : "buys"
User ||--o{ Review : "writes"
User ||--o{ ChatMessage : "sends"
User ||--o{ Cart : "owns"

Category ||--o{ Product : "categorizes"
Product ||--o{ ProductVariant : "has variants"
Product ||--o{ ProductImage : "has images"
Product ||--o{ Review : "receives"

Cart ||--o{ CartItem : "contains"
CartItem }o--|| ProductVariant : "refers to"

Order ||--o{ OrderItem : "contains"
OrderItem }o--|| ProductVariant : "refers to"

ChatRoom ||--o{ ChatMessage : "contains"
User ||--o{ ChatRoom : "participates"

' Controller to Service relationships
AuthController --> AuthService
ProductController --> ProductService
CategoryController --> CategoryService
SellerProductController --> ProductService
VariantController --> VariantService
CartController --> CartService
OrderController --> OrderService
ReviewController --> ReviewService
ChatController --> ChatService
ImageController --> ImageService
AdminController --> AdminService
HealthController --> HealthService

@enduml
